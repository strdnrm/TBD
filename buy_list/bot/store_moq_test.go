// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package bot

import (
	"buy_list/bot/models"
	"context"
	"sync"
)

// Ensure, that StorerMock does implement Storer.
// If this is not the case, regenerate this file with moq.
var _ Storer = &StorerMock{}

// StorerMock is a mock implementation of Storer.
//
//	func TestSomethingThatUsesStorer(t *testing.T) {
//
//		// make and configure a mocked Storer
//		mockedStorer := &StorerMock{
//			AddProductToBuyListFunc: func(ctx context.Context, p *models.Product) error {
//				panic("mock out the AddProductToBuyList method")
//			},
//			AddProductToFridgeFunc: func(ctx context.Context, f *models.FridgeProduct) error {
//				panic("mock out the AddProductToFridge method")
//			},
//			AddUsertgFunc: func(ctx context.Context, u *models.Usertg) error {
//				panic("mock out the AddUsertg method")
//			},
//			CreateProductByNameFunc: func(ctx context.Context, productName string) (models.Product, error) {
//				panic("mock out the CreateProductByName method")
//			},
//			DeleteProductFromBuyListByIdFunc: func(ctx context.Context, productId string, userid string) error {
//				panic("mock out the DeleteProductFromBuyListById method")
//			},
//			DeleteProductFromFridgeByIdFunc: func(ctx context.Context, productId string, userid string) error {
//				panic("mock out the DeleteProductFromFridgeById method")
//			},
//			GetBuyListByUsernameFunc: func(ctx context.Context, username string) ([]models.Product, error) {
//				panic("mock out the GetBuyListByUsername method")
//			},
//			GetChatIdByUserIdFunc: func(ctx context.Context, userid string) (int64, error) {
//				panic("mock out the GetChatIdByUserId method")
//			},
//			GetCountCookedUsedProductsInPeriodByUsernameFunc: func(ctx context.Context, username string, period models.PeriodStat) (int, error) {
//				panic("mock out the GetCountCookedUsedProductsInPeriodByUsername method")
//			},
//			GetCountThrownUsedProductsInPeriodByUsernameFunc: func(ctx context.Context, username string, period models.PeriodStat) (int, error) {
//				panic("mock out the GetCountThrownUsedProductsInPeriodByUsername method")
//			},
//			GetFridgeListByUsernameFunc: func(ctx context.Context, username string) ([]models.FridgeProduct, error) {
//				panic("mock out the GetFridgeListByUsername method")
//			},
//			GetFridgeListByUsernameAlphaFunc: func(ctx context.Context, username string) ([]models.FridgeProduct, error) {
//				panic("mock out the GetFridgeListByUsernameAlpha method")
//			},
//			GetFridgeListByUsernameExpDateFunc: func(ctx context.Context, username string) ([]models.FridgeProduct, error) {
//				panic("mock out the GetFridgeListByUsernameExpDate method")
//			},
//			GetProductByNameFunc: func(ctx context.Context, productName string) (models.Product, error) {
//				panic("mock out the GetProductByName method")
//			},
//			GetSoonExpireListFunc: func(ctx context.Context) ([]models.FridgeProduct, error) {
//				panic("mock out the GetSoonExpireList method")
//			},
//			GetTodayBuyListFunc: func(ctx context.Context) ([]models.Product, error) {
//				panic("mock out the GetTodayBuyList method")
//			},
//			GetUsedProductsByUsernameFunc: func(ctx context.Context, username string) ([]models.FridgeProduct, error) {
//				panic("mock out the GetUsedProductsByUsername method")
//			},
//			GetUsedProductsInPeriodByUsernameFunc: func(ctx context.Context, username string, period models.PeriodStat) ([]models.FridgeProduct, error) {
//				panic("mock out the GetUsedProductsInPeriodByUsername method")
//			},
//			GetUserByUsernameFunc: func(ctx context.Context, username string) (models.Usertg, error) {
//				panic("mock out the GetUserByUsername method")
//			},
//			OpenProductFromFridgeByIdFunc: func(ctx context.Context, productId string, expDate string) error {
//				panic("mock out the OpenProductFromFridgeById method")
//			},
//			SetCookedProductFromFridgeByIdFunc: func(ctx context.Context, productId string, useDate string) error {
//				panic("mock out the SetCookedProductFromFridgeById method")
//			},
//			SetThrownProductFromFridgeByIdFunc: func(ctx context.Context, productId string, useDate string) error {
//				panic("mock out the SetThrownProductFromFridgeById method")
//			},
//		}
//
//		// use mockedStorer in code that requires Storer
//		// and then make assertions.
//
//	}
type StorerMock struct {
	// AddProductToBuyListFunc mocks the AddProductToBuyList method.
	AddProductToBuyListFunc func(ctx context.Context, p *models.Product) error

	// AddProductToFridgeFunc mocks the AddProductToFridge method.
	AddProductToFridgeFunc func(ctx context.Context, f *models.FridgeProduct) error

	// AddUsertgFunc mocks the AddUsertg method.
	AddUsertgFunc func(ctx context.Context, u *models.Usertg) error

	// CreateProductByNameFunc mocks the CreateProductByName method.
	CreateProductByNameFunc func(ctx context.Context, productName string) (models.Product, error)

	// DeleteProductFromBuyListByIdFunc mocks the DeleteProductFromBuyListById method.
	DeleteProductFromBuyListByIdFunc func(ctx context.Context, productId string, userid string) error

	// DeleteProductFromFridgeByIdFunc mocks the DeleteProductFromFridgeById method.
	DeleteProductFromFridgeByIdFunc func(ctx context.Context, productId string, userid string) error

	// GetBuyListByUsernameFunc mocks the GetBuyListByUsername method.
	GetBuyListByUsernameFunc func(ctx context.Context, username string) ([]models.Product, error)

	// GetChatIdByUserIdFunc mocks the GetChatIdByUserId method.
	GetChatIdByUserIdFunc func(ctx context.Context, userid string) (int64, error)

	// GetCountCookedUsedProductsInPeriodByUsernameFunc mocks the GetCountCookedUsedProductsInPeriodByUsername method.
	GetCountCookedUsedProductsInPeriodByUsernameFunc func(ctx context.Context, username string, period models.PeriodStat) (int, error)

	// GetCountThrownUsedProductsInPeriodByUsernameFunc mocks the GetCountThrownUsedProductsInPeriodByUsername method.
	GetCountThrownUsedProductsInPeriodByUsernameFunc func(ctx context.Context, username string, period models.PeriodStat) (int, error)

	// GetFridgeListByUsernameFunc mocks the GetFridgeListByUsername method.
	GetFridgeListByUsernameFunc func(ctx context.Context, username string) ([]models.FridgeProduct, error)

	// GetFridgeListByUsernameAlphaFunc mocks the GetFridgeListByUsernameAlpha method.
	GetFridgeListByUsernameAlphaFunc func(ctx context.Context, username string) ([]models.FridgeProduct, error)

	// GetFridgeListByUsernameExpDateFunc mocks the GetFridgeListByUsernameExpDate method.
	GetFridgeListByUsernameExpDateFunc func(ctx context.Context, username string) ([]models.FridgeProduct, error)

	// GetProductByNameFunc mocks the GetProductByName method.
	GetProductByNameFunc func(ctx context.Context, productName string) (models.Product, error)

	// GetSoonExpireListFunc mocks the GetSoonExpireList method.
	GetSoonExpireListFunc func(ctx context.Context) ([]models.FridgeProduct, error)

	// GetTodayBuyListFunc mocks the GetTodayBuyList method.
	GetTodayBuyListFunc func(ctx context.Context) ([]models.Product, error)

	// GetUsedProductsByUsernameFunc mocks the GetUsedProductsByUsername method.
	GetUsedProductsByUsernameFunc func(ctx context.Context, username string) ([]models.FridgeProduct, error)

	// GetUsedProductsInPeriodByUsernameFunc mocks the GetUsedProductsInPeriodByUsername method.
	GetUsedProductsInPeriodByUsernameFunc func(ctx context.Context, username string, period models.PeriodStat) ([]models.FridgeProduct, error)

	// GetUserByUsernameFunc mocks the GetUserByUsername method.
	GetUserByUsernameFunc func(ctx context.Context, username string) (models.Usertg, error)

	// OpenProductFromFridgeByIdFunc mocks the OpenProductFromFridgeById method.
	OpenProductFromFridgeByIdFunc func(ctx context.Context, productId string, expDate string) error

	// SetCookedProductFromFridgeByIdFunc mocks the SetCookedProductFromFridgeById method.
	SetCookedProductFromFridgeByIdFunc func(ctx context.Context, productId string, useDate string) error

	// SetThrownProductFromFridgeByIdFunc mocks the SetThrownProductFromFridgeById method.
	SetThrownProductFromFridgeByIdFunc func(ctx context.Context, productId string, useDate string) error

	// calls tracks calls to the methods.
	calls struct {
		// AddProductToBuyList holds details about calls to the AddProductToBuyList method.
		AddProductToBuyList []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// P is the p argument value.
			P *models.Product
		}
		// AddProductToFridge holds details about calls to the AddProductToFridge method.
		AddProductToFridge []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// F is the f argument value.
			F *models.FridgeProduct
		}
		// AddUsertg holds details about calls to the AddUsertg method.
		AddUsertg []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// U is the u argument value.
			U *models.Usertg
		}
		// CreateProductByName holds details about calls to the CreateProductByName method.
		CreateProductByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProductName is the productName argument value.
			ProductName string
		}
		// DeleteProductFromBuyListById holds details about calls to the DeleteProductFromBuyListById method.
		DeleteProductFromBuyListById []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProductId is the productId argument value.
			ProductId string
			// Userid is the userid argument value.
			Userid string
		}
		// DeleteProductFromFridgeById holds details about calls to the DeleteProductFromFridgeById method.
		DeleteProductFromFridgeById []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProductId is the productId argument value.
			ProductId string
			// Userid is the userid argument value.
			Userid string
		}
		// GetBuyListByUsername holds details about calls to the GetBuyListByUsername method.
		GetBuyListByUsername []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Username is the username argument value.
			Username string
		}
		// GetChatIdByUserId holds details about calls to the GetChatIdByUserId method.
		GetChatIdByUserId []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Userid is the userid argument value.
			Userid string
		}
		// GetCountCookedUsedProductsInPeriodByUsername holds details about calls to the GetCountCookedUsedProductsInPeriodByUsername method.
		GetCountCookedUsedProductsInPeriodByUsername []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Username is the username argument value.
			Username string
			// Period is the period argument value.
			Period models.PeriodStat
		}
		// GetCountThrownUsedProductsInPeriodByUsername holds details about calls to the GetCountThrownUsedProductsInPeriodByUsername method.
		GetCountThrownUsedProductsInPeriodByUsername []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Username is the username argument value.
			Username string
			// Period is the period argument value.
			Period models.PeriodStat
		}
		// GetFridgeListByUsername holds details about calls to the GetFridgeListByUsername method.
		GetFridgeListByUsername []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Username is the username argument value.
			Username string
		}
		// GetFridgeListByUsernameAlpha holds details about calls to the GetFridgeListByUsernameAlpha method.
		GetFridgeListByUsernameAlpha []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Username is the username argument value.
			Username string
		}
		// GetFridgeListByUsernameExpDate holds details about calls to the GetFridgeListByUsernameExpDate method.
		GetFridgeListByUsernameExpDate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Username is the username argument value.
			Username string
		}
		// GetProductByName holds details about calls to the GetProductByName method.
		GetProductByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProductName is the productName argument value.
			ProductName string
		}
		// GetSoonExpireList holds details about calls to the GetSoonExpireList method.
		GetSoonExpireList []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetTodayBuyList holds details about calls to the GetTodayBuyList method.
		GetTodayBuyList []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetUsedProductsByUsername holds details about calls to the GetUsedProductsByUsername method.
		GetUsedProductsByUsername []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Username is the username argument value.
			Username string
		}
		// GetUsedProductsInPeriodByUsername holds details about calls to the GetUsedProductsInPeriodByUsername method.
		GetUsedProductsInPeriodByUsername []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Username is the username argument value.
			Username string
			// Period is the period argument value.
			Period models.PeriodStat
		}
		// GetUserByUsername holds details about calls to the GetUserByUsername method.
		GetUserByUsername []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Username is the username argument value.
			Username string
		}
		// OpenProductFromFridgeById holds details about calls to the OpenProductFromFridgeById method.
		OpenProductFromFridgeById []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProductId is the productId argument value.
			ProductId string
			// ExpDate is the expDate argument value.
			ExpDate string
		}
		// SetCookedProductFromFridgeById holds details about calls to the SetCookedProductFromFridgeById method.
		SetCookedProductFromFridgeById []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProductId is the productId argument value.
			ProductId string
			// UseDate is the useDate argument value.
			UseDate string
		}
		// SetThrownProductFromFridgeById holds details about calls to the SetThrownProductFromFridgeById method.
		SetThrownProductFromFridgeById []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProductId is the productId argument value.
			ProductId string
			// UseDate is the useDate argument value.
			UseDate string
		}
	}
	lockAddProductToBuyList                          sync.RWMutex
	lockAddProductToFridge                           sync.RWMutex
	lockAddUsertg                                    sync.RWMutex
	lockCreateProductByName                          sync.RWMutex
	lockDeleteProductFromBuyListById                 sync.RWMutex
	lockDeleteProductFromFridgeById                  sync.RWMutex
	lockGetBuyListByUsername                         sync.RWMutex
	lockGetChatIdByUserId                            sync.RWMutex
	lockGetCountCookedUsedProductsInPeriodByUsername sync.RWMutex
	lockGetCountThrownUsedProductsInPeriodByUsername sync.RWMutex
	lockGetFridgeListByUsername                      sync.RWMutex
	lockGetFridgeListByUsernameAlpha                 sync.RWMutex
	lockGetFridgeListByUsernameExpDate               sync.RWMutex
	lockGetProductByName                             sync.RWMutex
	lockGetSoonExpireList                            sync.RWMutex
	lockGetTodayBuyList                              sync.RWMutex
	lockGetUsedProductsByUsername                    sync.RWMutex
	lockGetUsedProductsInPeriodByUsername            sync.RWMutex
	lockGetUserByUsername                            sync.RWMutex
	lockOpenProductFromFridgeById                    sync.RWMutex
	lockSetCookedProductFromFridgeById               sync.RWMutex
	lockSetThrownProductFromFridgeById               sync.RWMutex
}

// AddProductToBuyList calls AddProductToBuyListFunc.
func (mock *StorerMock) AddProductToBuyList(ctx context.Context, p *models.Product) error {
	if mock.AddProductToBuyListFunc == nil {
		panic("StorerMock.AddProductToBuyListFunc: method is nil but Storer.AddProductToBuyList was just called")
	}
	callInfo := struct {
		Ctx context.Context
		P   *models.Product
	}{
		Ctx: ctx,
		P:   p,
	}
	mock.lockAddProductToBuyList.Lock()
	mock.calls.AddProductToBuyList = append(mock.calls.AddProductToBuyList, callInfo)
	mock.lockAddProductToBuyList.Unlock()
	return mock.AddProductToBuyListFunc(ctx, p)
}

// AddProductToBuyListCalls gets all the calls that were made to AddProductToBuyList.
// Check the length with:
//
//	len(mockedStorer.AddProductToBuyListCalls())
func (mock *StorerMock) AddProductToBuyListCalls() []struct {
	Ctx context.Context
	P   *models.Product
} {
	var calls []struct {
		Ctx context.Context
		P   *models.Product
	}
	mock.lockAddProductToBuyList.RLock()
	calls = mock.calls.AddProductToBuyList
	mock.lockAddProductToBuyList.RUnlock()
	return calls
}

// AddProductToFridge calls AddProductToFridgeFunc.
func (mock *StorerMock) AddProductToFridge(ctx context.Context, f *models.FridgeProduct) error {
	if mock.AddProductToFridgeFunc == nil {
		panic("StorerMock.AddProductToFridgeFunc: method is nil but Storer.AddProductToFridge was just called")
	}
	callInfo := struct {
		Ctx context.Context
		F   *models.FridgeProduct
	}{
		Ctx: ctx,
		F:   f,
	}
	mock.lockAddProductToFridge.Lock()
	mock.calls.AddProductToFridge = append(mock.calls.AddProductToFridge, callInfo)
	mock.lockAddProductToFridge.Unlock()
	return mock.AddProductToFridgeFunc(ctx, f)
}

// AddProductToFridgeCalls gets all the calls that were made to AddProductToFridge.
// Check the length with:
//
//	len(mockedStorer.AddProductToFridgeCalls())
func (mock *StorerMock) AddProductToFridgeCalls() []struct {
	Ctx context.Context
	F   *models.FridgeProduct
} {
	var calls []struct {
		Ctx context.Context
		F   *models.FridgeProduct
	}
	mock.lockAddProductToFridge.RLock()
	calls = mock.calls.AddProductToFridge
	mock.lockAddProductToFridge.RUnlock()
	return calls
}

// AddUsertg calls AddUsertgFunc.
func (mock *StorerMock) AddUsertg(ctx context.Context, u *models.Usertg) error {
	if mock.AddUsertgFunc == nil {
		panic("StorerMock.AddUsertgFunc: method is nil but Storer.AddUsertg was just called")
	}
	callInfo := struct {
		Ctx context.Context
		U   *models.Usertg
	}{
		Ctx: ctx,
		U:   u,
	}
	mock.lockAddUsertg.Lock()
	mock.calls.AddUsertg = append(mock.calls.AddUsertg, callInfo)
	mock.lockAddUsertg.Unlock()
	return mock.AddUsertgFunc(ctx, u)
}

// AddUsertgCalls gets all the calls that were made to AddUsertg.
// Check the length with:
//
//	len(mockedStorer.AddUsertgCalls())
func (mock *StorerMock) AddUsertgCalls() []struct {
	Ctx context.Context
	U   *models.Usertg
} {
	var calls []struct {
		Ctx context.Context
		U   *models.Usertg
	}
	mock.lockAddUsertg.RLock()
	calls = mock.calls.AddUsertg
	mock.lockAddUsertg.RUnlock()
	return calls
}

// CreateProductByName calls CreateProductByNameFunc.
func (mock *StorerMock) CreateProductByName(ctx context.Context, productName string) (models.Product, error) {
	if mock.CreateProductByNameFunc == nil {
		panic("StorerMock.CreateProductByNameFunc: method is nil but Storer.CreateProductByName was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		ProductName string
	}{
		Ctx:         ctx,
		ProductName: productName,
	}
	mock.lockCreateProductByName.Lock()
	mock.calls.CreateProductByName = append(mock.calls.CreateProductByName, callInfo)
	mock.lockCreateProductByName.Unlock()
	return mock.CreateProductByNameFunc(ctx, productName)
}

// CreateProductByNameCalls gets all the calls that were made to CreateProductByName.
// Check the length with:
//
//	len(mockedStorer.CreateProductByNameCalls())
func (mock *StorerMock) CreateProductByNameCalls() []struct {
	Ctx         context.Context
	ProductName string
} {
	var calls []struct {
		Ctx         context.Context
		ProductName string
	}
	mock.lockCreateProductByName.RLock()
	calls = mock.calls.CreateProductByName
	mock.lockCreateProductByName.RUnlock()
	return calls
}

// DeleteProductFromBuyListById calls DeleteProductFromBuyListByIdFunc.
func (mock *StorerMock) DeleteProductFromBuyListById(ctx context.Context, productId string, userid string) error {
	if mock.DeleteProductFromBuyListByIdFunc == nil {
		panic("StorerMock.DeleteProductFromBuyListByIdFunc: method is nil but Storer.DeleteProductFromBuyListById was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		ProductId string
		Userid    string
	}{
		Ctx:       ctx,
		ProductId: productId,
		Userid:    userid,
	}
	mock.lockDeleteProductFromBuyListById.Lock()
	mock.calls.DeleteProductFromBuyListById = append(mock.calls.DeleteProductFromBuyListById, callInfo)
	mock.lockDeleteProductFromBuyListById.Unlock()
	return mock.DeleteProductFromBuyListByIdFunc(ctx, productId, userid)
}

// DeleteProductFromBuyListByIdCalls gets all the calls that were made to DeleteProductFromBuyListById.
// Check the length with:
//
//	len(mockedStorer.DeleteProductFromBuyListByIdCalls())
func (mock *StorerMock) DeleteProductFromBuyListByIdCalls() []struct {
	Ctx       context.Context
	ProductId string
	Userid    string
} {
	var calls []struct {
		Ctx       context.Context
		ProductId string
		Userid    string
	}
	mock.lockDeleteProductFromBuyListById.RLock()
	calls = mock.calls.DeleteProductFromBuyListById
	mock.lockDeleteProductFromBuyListById.RUnlock()
	return calls
}

// DeleteProductFromFridgeById calls DeleteProductFromFridgeByIdFunc.
func (mock *StorerMock) DeleteProductFromFridgeById(ctx context.Context, productId string, userid string) error {
	if mock.DeleteProductFromFridgeByIdFunc == nil {
		panic("StorerMock.DeleteProductFromFridgeByIdFunc: method is nil but Storer.DeleteProductFromFridgeById was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		ProductId string
		Userid    string
	}{
		Ctx:       ctx,
		ProductId: productId,
		Userid:    userid,
	}
	mock.lockDeleteProductFromFridgeById.Lock()
	mock.calls.DeleteProductFromFridgeById = append(mock.calls.DeleteProductFromFridgeById, callInfo)
	mock.lockDeleteProductFromFridgeById.Unlock()
	return mock.DeleteProductFromFridgeByIdFunc(ctx, productId, userid)
}

// DeleteProductFromFridgeByIdCalls gets all the calls that were made to DeleteProductFromFridgeById.
// Check the length with:
//
//	len(mockedStorer.DeleteProductFromFridgeByIdCalls())
func (mock *StorerMock) DeleteProductFromFridgeByIdCalls() []struct {
	Ctx       context.Context
	ProductId string
	Userid    string
} {
	var calls []struct {
		Ctx       context.Context
		ProductId string
		Userid    string
	}
	mock.lockDeleteProductFromFridgeById.RLock()
	calls = mock.calls.DeleteProductFromFridgeById
	mock.lockDeleteProductFromFridgeById.RUnlock()
	return calls
}

// GetBuyListByUsername calls GetBuyListByUsernameFunc.
func (mock *StorerMock) GetBuyListByUsername(ctx context.Context, username string) ([]models.Product, error) {
	if mock.GetBuyListByUsernameFunc == nil {
		panic("StorerMock.GetBuyListByUsernameFunc: method is nil but Storer.GetBuyListByUsername was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Username string
	}{
		Ctx:      ctx,
		Username: username,
	}
	mock.lockGetBuyListByUsername.Lock()
	mock.calls.GetBuyListByUsername = append(mock.calls.GetBuyListByUsername, callInfo)
	mock.lockGetBuyListByUsername.Unlock()
	return mock.GetBuyListByUsernameFunc(ctx, username)
}

// GetBuyListByUsernameCalls gets all the calls that were made to GetBuyListByUsername.
// Check the length with:
//
//	len(mockedStorer.GetBuyListByUsernameCalls())
func (mock *StorerMock) GetBuyListByUsernameCalls() []struct {
	Ctx      context.Context
	Username string
} {
	var calls []struct {
		Ctx      context.Context
		Username string
	}
	mock.lockGetBuyListByUsername.RLock()
	calls = mock.calls.GetBuyListByUsername
	mock.lockGetBuyListByUsername.RUnlock()
	return calls
}

// GetChatIdByUserId calls GetChatIdByUserIdFunc.
func (mock *StorerMock) GetChatIdByUserId(ctx context.Context, userid string) (int64, error) {
	if mock.GetChatIdByUserIdFunc == nil {
		panic("StorerMock.GetChatIdByUserIdFunc: method is nil but Storer.GetChatIdByUserId was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Userid string
	}{
		Ctx:    ctx,
		Userid: userid,
	}
	mock.lockGetChatIdByUserId.Lock()
	mock.calls.GetChatIdByUserId = append(mock.calls.GetChatIdByUserId, callInfo)
	mock.lockGetChatIdByUserId.Unlock()
	return mock.GetChatIdByUserIdFunc(ctx, userid)
}

// GetChatIdByUserIdCalls gets all the calls that were made to GetChatIdByUserId.
// Check the length with:
//
//	len(mockedStorer.GetChatIdByUserIdCalls())
func (mock *StorerMock) GetChatIdByUserIdCalls() []struct {
	Ctx    context.Context
	Userid string
} {
	var calls []struct {
		Ctx    context.Context
		Userid string
	}
	mock.lockGetChatIdByUserId.RLock()
	calls = mock.calls.GetChatIdByUserId
	mock.lockGetChatIdByUserId.RUnlock()
	return calls
}

// GetCountCookedUsedProductsInPeriodByUsername calls GetCountCookedUsedProductsInPeriodByUsernameFunc.
func (mock *StorerMock) GetCountCookedUsedProductsInPeriodByUsername(ctx context.Context, username string, period models.PeriodStat) (int, error) {
	if mock.GetCountCookedUsedProductsInPeriodByUsernameFunc == nil {
		panic("StorerMock.GetCountCookedUsedProductsInPeriodByUsernameFunc: method is nil but Storer.GetCountCookedUsedProductsInPeriodByUsername was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Username string
		Period   models.PeriodStat
	}{
		Ctx:      ctx,
		Username: username,
		Period:   period,
	}
	mock.lockGetCountCookedUsedProductsInPeriodByUsername.Lock()
	mock.calls.GetCountCookedUsedProductsInPeriodByUsername = append(mock.calls.GetCountCookedUsedProductsInPeriodByUsername, callInfo)
	mock.lockGetCountCookedUsedProductsInPeriodByUsername.Unlock()
	return mock.GetCountCookedUsedProductsInPeriodByUsernameFunc(ctx, username, period)
}

// GetCountCookedUsedProductsInPeriodByUsernameCalls gets all the calls that were made to GetCountCookedUsedProductsInPeriodByUsername.
// Check the length with:
//
//	len(mockedStorer.GetCountCookedUsedProductsInPeriodByUsernameCalls())
func (mock *StorerMock) GetCountCookedUsedProductsInPeriodByUsernameCalls() []struct {
	Ctx      context.Context
	Username string
	Period   models.PeriodStat
} {
	var calls []struct {
		Ctx      context.Context
		Username string
		Period   models.PeriodStat
	}
	mock.lockGetCountCookedUsedProductsInPeriodByUsername.RLock()
	calls = mock.calls.GetCountCookedUsedProductsInPeriodByUsername
	mock.lockGetCountCookedUsedProductsInPeriodByUsername.RUnlock()
	return calls
}

// GetCountThrownUsedProductsInPeriodByUsername calls GetCountThrownUsedProductsInPeriodByUsernameFunc.
func (mock *StorerMock) GetCountThrownUsedProductsInPeriodByUsername(ctx context.Context, username string, period models.PeriodStat) (int, error) {
	if mock.GetCountThrownUsedProductsInPeriodByUsernameFunc == nil {
		panic("StorerMock.GetCountThrownUsedProductsInPeriodByUsernameFunc: method is nil but Storer.GetCountThrownUsedProductsInPeriodByUsername was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Username string
		Period   models.PeriodStat
	}{
		Ctx:      ctx,
		Username: username,
		Period:   period,
	}
	mock.lockGetCountThrownUsedProductsInPeriodByUsername.Lock()
	mock.calls.GetCountThrownUsedProductsInPeriodByUsername = append(mock.calls.GetCountThrownUsedProductsInPeriodByUsername, callInfo)
	mock.lockGetCountThrownUsedProductsInPeriodByUsername.Unlock()
	return mock.GetCountThrownUsedProductsInPeriodByUsernameFunc(ctx, username, period)
}

// GetCountThrownUsedProductsInPeriodByUsernameCalls gets all the calls that were made to GetCountThrownUsedProductsInPeriodByUsername.
// Check the length with:
//
//	len(mockedStorer.GetCountThrownUsedProductsInPeriodByUsernameCalls())
func (mock *StorerMock) GetCountThrownUsedProductsInPeriodByUsernameCalls() []struct {
	Ctx      context.Context
	Username string
	Period   models.PeriodStat
} {
	var calls []struct {
		Ctx      context.Context
		Username string
		Period   models.PeriodStat
	}
	mock.lockGetCountThrownUsedProductsInPeriodByUsername.RLock()
	calls = mock.calls.GetCountThrownUsedProductsInPeriodByUsername
	mock.lockGetCountThrownUsedProductsInPeriodByUsername.RUnlock()
	return calls
}

// GetFridgeListByUsername calls GetFridgeListByUsernameFunc.
func (mock *StorerMock) GetFridgeListByUsername(ctx context.Context, username string) ([]models.FridgeProduct, error) {
	if mock.GetFridgeListByUsernameFunc == nil {
		panic("StorerMock.GetFridgeListByUsernameFunc: method is nil but Storer.GetFridgeListByUsername was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Username string
	}{
		Ctx:      ctx,
		Username: username,
	}
	mock.lockGetFridgeListByUsername.Lock()
	mock.calls.GetFridgeListByUsername = append(mock.calls.GetFridgeListByUsername, callInfo)
	mock.lockGetFridgeListByUsername.Unlock()
	return mock.GetFridgeListByUsernameFunc(ctx, username)
}

// GetFridgeListByUsernameCalls gets all the calls that were made to GetFridgeListByUsername.
// Check the length with:
//
//	len(mockedStorer.GetFridgeListByUsernameCalls())
func (mock *StorerMock) GetFridgeListByUsernameCalls() []struct {
	Ctx      context.Context
	Username string
} {
	var calls []struct {
		Ctx      context.Context
		Username string
	}
	mock.lockGetFridgeListByUsername.RLock()
	calls = mock.calls.GetFridgeListByUsername
	mock.lockGetFridgeListByUsername.RUnlock()
	return calls
}

// GetFridgeListByUsernameAlpha calls GetFridgeListByUsernameAlphaFunc.
func (mock *StorerMock) GetFridgeListByUsernameAlpha(ctx context.Context, username string) ([]models.FridgeProduct, error) {
	if mock.GetFridgeListByUsernameAlphaFunc == nil {
		panic("StorerMock.GetFridgeListByUsernameAlphaFunc: method is nil but Storer.GetFridgeListByUsernameAlpha was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Username string
	}{
		Ctx:      ctx,
		Username: username,
	}
	mock.lockGetFridgeListByUsernameAlpha.Lock()
	mock.calls.GetFridgeListByUsernameAlpha = append(mock.calls.GetFridgeListByUsernameAlpha, callInfo)
	mock.lockGetFridgeListByUsernameAlpha.Unlock()
	return mock.GetFridgeListByUsernameAlphaFunc(ctx, username)
}

// GetFridgeListByUsernameAlphaCalls gets all the calls that were made to GetFridgeListByUsernameAlpha.
// Check the length with:
//
//	len(mockedStorer.GetFridgeListByUsernameAlphaCalls())
func (mock *StorerMock) GetFridgeListByUsernameAlphaCalls() []struct {
	Ctx      context.Context
	Username string
} {
	var calls []struct {
		Ctx      context.Context
		Username string
	}
	mock.lockGetFridgeListByUsernameAlpha.RLock()
	calls = mock.calls.GetFridgeListByUsernameAlpha
	mock.lockGetFridgeListByUsernameAlpha.RUnlock()
	return calls
}

// GetFridgeListByUsernameExpDate calls GetFridgeListByUsernameExpDateFunc.
func (mock *StorerMock) GetFridgeListByUsernameExpDate(ctx context.Context, username string) ([]models.FridgeProduct, error) {
	if mock.GetFridgeListByUsernameExpDateFunc == nil {
		panic("StorerMock.GetFridgeListByUsernameExpDateFunc: method is nil but Storer.GetFridgeListByUsernameExpDate was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Username string
	}{
		Ctx:      ctx,
		Username: username,
	}
	mock.lockGetFridgeListByUsernameExpDate.Lock()
	mock.calls.GetFridgeListByUsernameExpDate = append(mock.calls.GetFridgeListByUsernameExpDate, callInfo)
	mock.lockGetFridgeListByUsernameExpDate.Unlock()
	return mock.GetFridgeListByUsernameExpDateFunc(ctx, username)
}

// GetFridgeListByUsernameExpDateCalls gets all the calls that were made to GetFridgeListByUsernameExpDate.
// Check the length with:
//
//	len(mockedStorer.GetFridgeListByUsernameExpDateCalls())
func (mock *StorerMock) GetFridgeListByUsernameExpDateCalls() []struct {
	Ctx      context.Context
	Username string
} {
	var calls []struct {
		Ctx      context.Context
		Username string
	}
	mock.lockGetFridgeListByUsernameExpDate.RLock()
	calls = mock.calls.GetFridgeListByUsernameExpDate
	mock.lockGetFridgeListByUsernameExpDate.RUnlock()
	return calls
}

// GetProductByName calls GetProductByNameFunc.
func (mock *StorerMock) GetProductByName(ctx context.Context, productName string) (models.Product, error) {
	if mock.GetProductByNameFunc == nil {
		panic("StorerMock.GetProductByNameFunc: method is nil but Storer.GetProductByName was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		ProductName string
	}{
		Ctx:         ctx,
		ProductName: productName,
	}
	mock.lockGetProductByName.Lock()
	mock.calls.GetProductByName = append(mock.calls.GetProductByName, callInfo)
	mock.lockGetProductByName.Unlock()
	return mock.GetProductByNameFunc(ctx, productName)
}

// GetProductByNameCalls gets all the calls that were made to GetProductByName.
// Check the length with:
//
//	len(mockedStorer.GetProductByNameCalls())
func (mock *StorerMock) GetProductByNameCalls() []struct {
	Ctx         context.Context
	ProductName string
} {
	var calls []struct {
		Ctx         context.Context
		ProductName string
	}
	mock.lockGetProductByName.RLock()
	calls = mock.calls.GetProductByName
	mock.lockGetProductByName.RUnlock()
	return calls
}

// GetSoonExpireList calls GetSoonExpireListFunc.
func (mock *StorerMock) GetSoonExpireList(ctx context.Context) ([]models.FridgeProduct, error) {
	if mock.GetSoonExpireListFunc == nil {
		panic("StorerMock.GetSoonExpireListFunc: method is nil but Storer.GetSoonExpireList was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetSoonExpireList.Lock()
	mock.calls.GetSoonExpireList = append(mock.calls.GetSoonExpireList, callInfo)
	mock.lockGetSoonExpireList.Unlock()
	return mock.GetSoonExpireListFunc(ctx)
}

// GetSoonExpireListCalls gets all the calls that were made to GetSoonExpireList.
// Check the length with:
//
//	len(mockedStorer.GetSoonExpireListCalls())
func (mock *StorerMock) GetSoonExpireListCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetSoonExpireList.RLock()
	calls = mock.calls.GetSoonExpireList
	mock.lockGetSoonExpireList.RUnlock()
	return calls
}

// GetTodayBuyList calls GetTodayBuyListFunc.
func (mock *StorerMock) GetTodayBuyList(ctx context.Context) ([]models.Product, error) {
	if mock.GetTodayBuyListFunc == nil {
		panic("StorerMock.GetTodayBuyListFunc: method is nil but Storer.GetTodayBuyList was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetTodayBuyList.Lock()
	mock.calls.GetTodayBuyList = append(mock.calls.GetTodayBuyList, callInfo)
	mock.lockGetTodayBuyList.Unlock()
	return mock.GetTodayBuyListFunc(ctx)
}

// GetTodayBuyListCalls gets all the calls that were made to GetTodayBuyList.
// Check the length with:
//
//	len(mockedStorer.GetTodayBuyListCalls())
func (mock *StorerMock) GetTodayBuyListCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetTodayBuyList.RLock()
	calls = mock.calls.GetTodayBuyList
	mock.lockGetTodayBuyList.RUnlock()
	return calls
}

// GetUsedProductsByUsername calls GetUsedProductsByUsernameFunc.
func (mock *StorerMock) GetUsedProductsByUsername(ctx context.Context, username string) ([]models.FridgeProduct, error) {
	if mock.GetUsedProductsByUsernameFunc == nil {
		panic("StorerMock.GetUsedProductsByUsernameFunc: method is nil but Storer.GetUsedProductsByUsername was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Username string
	}{
		Ctx:      ctx,
		Username: username,
	}
	mock.lockGetUsedProductsByUsername.Lock()
	mock.calls.GetUsedProductsByUsername = append(mock.calls.GetUsedProductsByUsername, callInfo)
	mock.lockGetUsedProductsByUsername.Unlock()
	return mock.GetUsedProductsByUsernameFunc(ctx, username)
}

// GetUsedProductsByUsernameCalls gets all the calls that were made to GetUsedProductsByUsername.
// Check the length with:
//
//	len(mockedStorer.GetUsedProductsByUsernameCalls())
func (mock *StorerMock) GetUsedProductsByUsernameCalls() []struct {
	Ctx      context.Context
	Username string
} {
	var calls []struct {
		Ctx      context.Context
		Username string
	}
	mock.lockGetUsedProductsByUsername.RLock()
	calls = mock.calls.GetUsedProductsByUsername
	mock.lockGetUsedProductsByUsername.RUnlock()
	return calls
}

// GetUsedProductsInPeriodByUsername calls GetUsedProductsInPeriodByUsernameFunc.
func (mock *StorerMock) GetUsedProductsInPeriodByUsername(ctx context.Context, username string, period models.PeriodStat) ([]models.FridgeProduct, error) {
	if mock.GetUsedProductsInPeriodByUsernameFunc == nil {
		panic("StorerMock.GetUsedProductsInPeriodByUsernameFunc: method is nil but Storer.GetUsedProductsInPeriodByUsername was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Username string
		Period   models.PeriodStat
	}{
		Ctx:      ctx,
		Username: username,
		Period:   period,
	}
	mock.lockGetUsedProductsInPeriodByUsername.Lock()
	mock.calls.GetUsedProductsInPeriodByUsername = append(mock.calls.GetUsedProductsInPeriodByUsername, callInfo)
	mock.lockGetUsedProductsInPeriodByUsername.Unlock()
	return mock.GetUsedProductsInPeriodByUsernameFunc(ctx, username, period)
}

// GetUsedProductsInPeriodByUsernameCalls gets all the calls that were made to GetUsedProductsInPeriodByUsername.
// Check the length with:
//
//	len(mockedStorer.GetUsedProductsInPeriodByUsernameCalls())
func (mock *StorerMock) GetUsedProductsInPeriodByUsernameCalls() []struct {
	Ctx      context.Context
	Username string
	Period   models.PeriodStat
} {
	var calls []struct {
		Ctx      context.Context
		Username string
		Period   models.PeriodStat
	}
	mock.lockGetUsedProductsInPeriodByUsername.RLock()
	calls = mock.calls.GetUsedProductsInPeriodByUsername
	mock.lockGetUsedProductsInPeriodByUsername.RUnlock()
	return calls
}

// GetUserByUsername calls GetUserByUsernameFunc.
func (mock *StorerMock) GetUserByUsername(ctx context.Context, username string) (models.Usertg, error) {
	if mock.GetUserByUsernameFunc == nil {
		panic("StorerMock.GetUserByUsernameFunc: method is nil but Storer.GetUserByUsername was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Username string
	}{
		Ctx:      ctx,
		Username: username,
	}
	mock.lockGetUserByUsername.Lock()
	mock.calls.GetUserByUsername = append(mock.calls.GetUserByUsername, callInfo)
	mock.lockGetUserByUsername.Unlock()
	return mock.GetUserByUsernameFunc(ctx, username)
}

// GetUserByUsernameCalls gets all the calls that were made to GetUserByUsername.
// Check the length with:
//
//	len(mockedStorer.GetUserByUsernameCalls())
func (mock *StorerMock) GetUserByUsernameCalls() []struct {
	Ctx      context.Context
	Username string
} {
	var calls []struct {
		Ctx      context.Context
		Username string
	}
	mock.lockGetUserByUsername.RLock()
	calls = mock.calls.GetUserByUsername
	mock.lockGetUserByUsername.RUnlock()
	return calls
}

// OpenProductFromFridgeById calls OpenProductFromFridgeByIdFunc.
func (mock *StorerMock) OpenProductFromFridgeById(ctx context.Context, productId string, expDate string) error {
	if mock.OpenProductFromFridgeByIdFunc == nil {
		panic("StorerMock.OpenProductFromFridgeByIdFunc: method is nil but Storer.OpenProductFromFridgeById was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		ProductId string
		ExpDate   string
	}{
		Ctx:       ctx,
		ProductId: productId,
		ExpDate:   expDate,
	}
	mock.lockOpenProductFromFridgeById.Lock()
	mock.calls.OpenProductFromFridgeById = append(mock.calls.OpenProductFromFridgeById, callInfo)
	mock.lockOpenProductFromFridgeById.Unlock()
	return mock.OpenProductFromFridgeByIdFunc(ctx, productId, expDate)
}

// OpenProductFromFridgeByIdCalls gets all the calls that were made to OpenProductFromFridgeById.
// Check the length with:
//
//	len(mockedStorer.OpenProductFromFridgeByIdCalls())
func (mock *StorerMock) OpenProductFromFridgeByIdCalls() []struct {
	Ctx       context.Context
	ProductId string
	ExpDate   string
} {
	var calls []struct {
		Ctx       context.Context
		ProductId string
		ExpDate   string
	}
	mock.lockOpenProductFromFridgeById.RLock()
	calls = mock.calls.OpenProductFromFridgeById
	mock.lockOpenProductFromFridgeById.RUnlock()
	return calls
}

// SetCookedProductFromFridgeById calls SetCookedProductFromFridgeByIdFunc.
func (mock *StorerMock) SetCookedProductFromFridgeById(ctx context.Context, productId string, useDate string) error {
	if mock.SetCookedProductFromFridgeByIdFunc == nil {
		panic("StorerMock.SetCookedProductFromFridgeByIdFunc: method is nil but Storer.SetCookedProductFromFridgeById was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		ProductId string
		UseDate   string
	}{
		Ctx:       ctx,
		ProductId: productId,
		UseDate:   useDate,
	}
	mock.lockSetCookedProductFromFridgeById.Lock()
	mock.calls.SetCookedProductFromFridgeById = append(mock.calls.SetCookedProductFromFridgeById, callInfo)
	mock.lockSetCookedProductFromFridgeById.Unlock()
	return mock.SetCookedProductFromFridgeByIdFunc(ctx, productId, useDate)
}

// SetCookedProductFromFridgeByIdCalls gets all the calls that were made to SetCookedProductFromFridgeById.
// Check the length with:
//
//	len(mockedStorer.SetCookedProductFromFridgeByIdCalls())
func (mock *StorerMock) SetCookedProductFromFridgeByIdCalls() []struct {
	Ctx       context.Context
	ProductId string
	UseDate   string
} {
	var calls []struct {
		Ctx       context.Context
		ProductId string
		UseDate   string
	}
	mock.lockSetCookedProductFromFridgeById.RLock()
	calls = mock.calls.SetCookedProductFromFridgeById
	mock.lockSetCookedProductFromFridgeById.RUnlock()
	return calls
}

// SetThrownProductFromFridgeById calls SetThrownProductFromFridgeByIdFunc.
func (mock *StorerMock) SetThrownProductFromFridgeById(ctx context.Context, productId string, useDate string) error {
	if mock.SetThrownProductFromFridgeByIdFunc == nil {
		panic("StorerMock.SetThrownProductFromFridgeByIdFunc: method is nil but Storer.SetThrownProductFromFridgeById was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		ProductId string
		UseDate   string
	}{
		Ctx:       ctx,
		ProductId: productId,
		UseDate:   useDate,
	}
	mock.lockSetThrownProductFromFridgeById.Lock()
	mock.calls.SetThrownProductFromFridgeById = append(mock.calls.SetThrownProductFromFridgeById, callInfo)
	mock.lockSetThrownProductFromFridgeById.Unlock()
	return mock.SetThrownProductFromFridgeByIdFunc(ctx, productId, useDate)
}

// SetThrownProductFromFridgeByIdCalls gets all the calls that were made to SetThrownProductFromFridgeById.
// Check the length with:
//
//	len(mockedStorer.SetThrownProductFromFridgeByIdCalls())
func (mock *StorerMock) SetThrownProductFromFridgeByIdCalls() []struct {
	Ctx       context.Context
	ProductId string
	UseDate   string
} {
	var calls []struct {
		Ctx       context.Context
		ProductId string
		UseDate   string
	}
	mock.lockSetThrownProductFromFridgeById.RLock()
	calls = mock.calls.SetThrownProductFromFridgeById
	mock.lockSetThrownProductFromFridgeById.RUnlock()
	return calls
}
